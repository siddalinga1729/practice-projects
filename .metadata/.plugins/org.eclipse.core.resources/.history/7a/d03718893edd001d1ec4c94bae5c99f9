package com.javatechie.controller;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.itextpdf.text.DocumentException;
import com.javatechie.entity.Product;
import com.javatechie.request.ReportRequest;
import com.javatechie.service.ProductService;

@RestController
@RequestMapping("/products")
public class ProductController {

	@Autowired
	private ProductService service;

	@PostConstruct
	public void testPostConstruct() {
		System.out.println(service);
		service.postConstruct();
	}

	@PostMapping
	public Product addProduct(@RequestBody Product product) {
		return service.saveProduct(product);
	}

	@GetMapping
	public List<Product> getProducts() {
		return service.getProducts();
	}

	@GetMapping("/{id}")
	public Product getProductById(@PathVariable int id) {
		return service.getProductById(id);
	}

	@PutMapping("/{id}")
	public Product updateProduct(@PathVariable int id, @RequestBody Product productRequest) {
		return service.updateProduct(id, productRequest);
	}

	@PatchMapping("/{id}")
	public Product updateProductFields(@PathVariable int id, @RequestBody Map<String, Object> fields) {
		return service.updateProductByFields(id, fields);
	}

	@DeleteMapping("/{id}")
	public long deleteProduct(@PathVariable int id) {
		return service.deleteProduct(id);
	}

	@GetMapping("/dummy")
	public Product dummy() {
		return new Product(1, "sim", 1200, "simmsfdj", "fefsg");
	}

	@PostMapping(value = "/dummy", produces = MediaType.APPLICATION_PDF_VALUE)
	public Product dummy1(@RequestBody ReportRequest data, HttpServletResponse response)
			throws DocumentException, IOException {
		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment; filename=\"table.pdf\"");

		service.dataToPdf(data, response.getOutputStream());
		response.getOutputStream().flush();
		return new Product(1, "sim", 1200, "simmsfdj", "fefsg");
	}

	@PostMapping(value = "/dummy1")
	public void dummy12(@RequestBody List<List<String>> data, HttpServletResponse response)
			throws DocumentException, IOException {

	    XWPFDocument document = new XWPFDocument();
	    
	    // Create a new table
	    XWPFTable table = document.createTable(data.size(), data.get(0).size());
	    
	    // Populate the table with data
	    for (int i = 0; i < data.size(); i++) {
	        List<String> rowData = data.get(i);
	        XWPFTableRow row = table.getRow(i);
	        for (int j = 0; j < rowData.size(); j++) {
	            XWPFTableCell cell = row.getCell(j);
	            cell.setText(rowData.get(j));
	        }
	    }
	    
	    // Write the document to the response
	    response.setContentType("application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	    response.setHeader("Content-Disposition", "attachment; filename=table.docx");
	    document.write(response.getOutputStream());
	    document.close();
	}

	}


